{"version":3,"file":"index.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["'use strict';\r\n// Вмикаємо строгий режим JavaScript для більш суворої перевірки помилок.\r\n\r\nimport SimpleLightbox from 'simplelightbox';\r\n// Імпортуємо бібліотеку SimpleLightbox для створення галереї з модальним переглядом зображень.\r\n\r\nimport 'simplelightbox/dist/simple-lightbox.min.css';\r\n// Імпортуємо стилі SimpleLightbox, щоб галерея мала коректний вигляд.\r\n\r\nexport function createGallery(images) {\r\n// Експортуємо функцію createGallery, яка приймає масив об’єктів images і створює HTML-розмітку галереї.\r\n\r\n  const gallery = document.querySelector('.gallery');\r\n  // Знаходимо DOM-елемент контейнера галереї за класом .gallery.\r\n\r\n  const galleryMarkup = images\r\n  // Створюємо HTML-розмітку для усіх зображень, перебираючи масив images методом map.\r\n\r\n    .map(\r\n      ({\r\n        webformatURL,\r\n        largeImageURL,\r\n        tags,\r\n        likes,\r\n        views,\r\n        comments,\r\n        downloads,\r\n      }) => {\r\n        // Деструктуруємо кожен об'єкт зображення, щоб отримати потрібні властивості.\r\n\r\n        return `\r\n          <li class=\"gallery-item\">\r\n            <a class=\"gallery-link\" href=\"${largeImageURL}\">\r\n              <img\r\n                class=\"gallery-image\" width=\"360\" height=\"200\"\r\n                src=\"${webformatURL}\"\r\n                alt=\"${tags}\"\r\n              />\r\n            </a>\r\n            <div class=\"info-card\">\r\n              <p class=\"info-item\">\r\n                <b>Likes</b> ${likes}\r\n              </p>\r\n              <p class=\"info-item\">\r\n                <b>Views</b> ${views}\r\n              </p>\r\n              <p class=\"info-item\">\r\n                <b>Comments</b> ${comments}\r\n              </p>\r\n              <p class=\"info-item\">\r\n                <b>Downloads</b> ${downloads}\r\n              </p>\r\n          </li>`;\r\n        // Повертаємо рядок HTML-коду для однієї картки зображення:\r\n        // - з посиланням на велике зображення (для SimpleLightbox),\r\n        // - картинкою з атрибутом alt,\r\n        // - інформацією про лайки, перегляди, коментарі і завантаження.\r\n      }\r\n    )\r\n    .join('');\r\n    // Обʼєднуємо усі рядки у один великий рядок HTML.\r\n\r\n  gallery.insertAdjacentHTML('beforeend', galleryMarkup);\r\n  // Вставляємо створену розмітку у контейнер галереї (додаємо в кінець).\r\n\r\n  new SimpleLightbox('.gallery a', {\r\n    captionsData: 'alt',\r\n    captionDelay: 250,\r\n  }).refresh();\r\n  // Ініціалізуємо SimpleLightbox на посиланнях галереї з налаштуваннями:\r\n  // - captionsData: 'alt' — підпис до зображення береться з атрибута alt,\r\n  // - captionDelay: 250 — затримка появи підпису 250 мс,\r\n  // Викликаємо refresh(), щоб SimpleLightbox оновився з новими елементами галереї.\r\n}\r\n\r\nexport function clearGallery() {\r\n  // Експортуємо функцію clearGallery, яка очищає вміст галереї.\r\n\r\n  const gallery = document.querySelector('.gallery');\r\n  // Знаходимо контейнер галереї.\r\n\r\n  if (gallery) {\r\n    gallery.innerHTML = '';\r\n    // Якщо контейнер існує — очищаємо його вміст, видаляючи всі картки.\r\n  }\r\n}\r\n\r\nexport function showLoader() {\r\n  // Експортуємо функцію showLoader, яка показує індикатор завантаження.\r\n\r\n  const loader = document.querySelector('.loader');\r\n  // Знаходимо елемент лоадера за класом .loader.\r\n\r\n  if (loader) {\r\n    loader.classList.remove('hidden');\r\n    // Якщо елемент існує — видаляємо клас 'hidden', щоб показати лоадер.\r\n  }\r\n}\r\n\r\nexport function hideLoader() {\r\n  // Експортуємо функцію hideLoader, яка ховає індикатор завантаження.\r\n\r\n  const loader = document.querySelector('.loader');\r\n  // Знаходимо елемент лоадера.\r\n\r\n  if (loader) {\r\n    loader.classList.add('hidden');\r\n    // Якщо існує — додаємо клас 'hidden', щоб приховати лоадер.\r\n  }\r\n}\r\n","'use strict'; \r\n// Вмикає строгий режим JavaScript для більш суворої перевірки помилок.\r\n\r\nimport axios from 'axios';\r\n// Імпортуємо бібліотеку axios для зручного виконання HTTP-запитів.\r\n\r\nimport iziToast from 'izitoast';\r\n// Імпортуємо бібліотеку iziToast для показу повідомлень (нотифікацій).\r\n\r\nimport 'izitoast/dist/css/iziToast.min.css';\r\n// Імпортуємо стилі для iziToast, щоб повідомлення мали коректний вигляд.\r\n\r\nexport default function getImagesByQuery(query, perPage = 3) {\r\n// Експортуємо функцію за замовчуванням (default export), яка приймає параметр пошуку `query` і необов'язковий параметр `perPage` (кількість зображень за замовчуванням 3).\r\n\r\n  const params = new URLSearchParams({\r\n  // Створюємо об'єкт URLSearchParams для формування параметрів запиту у форматі \"key=value&...\"\r\n\r\n    key: '50818720-8fed735658e97652981a6ffe2',\r\n    // Унікальний ключ доступу до API Pixabay.\r\n\r\n    q: query,\r\n    // Пошуковий запит, переданий у функцію.\r\n\r\n    image_type: 'photo',\r\n    // Тип зображень — тільки фотографії.\r\n\r\n    per_page: perPage,\r\n    // Кількість зображень, які потрібно отримати на одній сторінці.\r\n\r\n    orientation: 'horizontal',\r\n    // Орієнтація зображень — горизонтальна.\r\n\r\n    safesearch: true,\r\n    // Фільтр безпечного контенту (щоб не показувати дорослий контент).\r\n  });\r\n\r\n  const api = 'https://pixabay.com/api/';\r\n  // Базова URL-адреса API Pixabay.\r\n\r\n  return axios(`${api}?${params}`)\r\n  // Виконуємо GET-запит за сформованим URL із параметрами.\r\n\r\n    .then(response => {\r\n    // Обробляємо успішну відповідь від сервера.\r\n\r\n      const { hits } = response.data;\r\n      // Дістаємо з відповіді масив об'єктів із зображеннями (hits).\r\n\r\n      if (hits.length === 0) {\r\n      // Якщо масив порожній — немає знайдених зображень.\r\n\r\n        iziToast.error({\r\n        // Виводимо помилкове повідомлення iziToast.\r\n\r\n          title: 'Error',\r\n          message:\r\n            'Sorry, there are no images matching your search query. Please try again!',\r\n          position: 'topRight',\r\n        });\r\n\r\n        return [];\r\n        // Повертаємо порожній масив, щоб не далі не працювати з результатами.\r\n      }\r\n\r\n      return hits;\r\n      // Якщо є результати — повертаємо масив зображень.\r\n    })\r\n\r\n    .catch(error => {\r\n    // Обробляємо помилки запиту (наприклад, проблеми з мережею).\r\n\r\n      iziToast.error({\r\n      // Виводимо повідомлення про помилку із текстом з об'єкту помилки.\r\n\r\n        title: 'Error',\r\n        message: `An error occurred: ${error.message}`,\r\n        position: 'topRight',\r\n      });\r\n\r\n      return [];\r\n      // Повертаємо порожній масив при помилці, щоб не руйнувати роботу програми.\r\n    });\r\n}\r\n","'use strict';\r\n// Вмикаємо строгий режим JavaScript для кращої безпеки та виявлення помилок.\r\n\r\nimport iziToast from 'izitoast';\r\n// Імпортуємо бібліотеку iziToast для показу повідомлень (тостів).\r\n\r\nimport 'izitoast/dist/css/iziToast.min.css';\r\n// Імпортуємо стилі iziToast для коректного відображення повідомлень.\r\n\r\nimport {\r\n  createGallery,\r\n  clearGallery,\r\n  showLoader,\r\n  hideLoader,\r\n} from './js/render-functions.js';\r\n// Імпортуємо функції для роботи з UI: створення галереї, очищення, показ та приховування лоадера.\r\n\r\nimport getImagesByQuery from './js/pixabay-api';\r\n// Імпортуємо функцію для отримання зображень з API за пошуковим запитом.\r\n\r\nconst form = document.querySelector('.form');\r\n// Знаходимо в DOM форму пошуку за класом .form і зберігаємо у змінну.\r\n\r\nform.addEventListener('submit', event => {\r\n// Додаємо слухача події на відправку форми.\r\n\r\n  event.preventDefault();\r\n  // Відміняємо стандартну поведінку форми (щоб сторінка не перезавантажувалась).\r\n\r\n  clearGallery();\r\n  // Очищаємо галерею від попередніх результатів пошуку.\r\n\r\n  showLoader();\r\n  // Показуємо індикатор завантаження, щоб користувач бачив, що триває запит.\r\n\r\n  const query = document.querySelector('[name=\"search-text\"]').value.trim();\r\n  // Отримуємо значення текстового поля форми (пошуковий запит),\r\n  // видаляємо зайві пробіли по краях.\r\n\r\n  const perPage = document.querySelector('[name=\"per-page\"]').value;\r\n  // Отримуємо значення поля, яке вказує скільки карток показувати на сторінці.\r\n\r\n  getImagesByQuery(query, perPage)\r\n  // Викликаємо функцію для отримання зображень з API, передаючи пошуковий рядок і кількість результатів.\r\n\r\n    .then(hits => {\r\n      createGallery(hits);\r\n      // Якщо запит успішний, створюємо галерею з отриманих даних (масиву зображень).\r\n    })\r\n\r\n    .catch(error => {\r\n      iziToast.error({\r\n        title: 'Error',\r\n        message: `An error occurred: ${error.message}`,\r\n        position: 'topRight',\r\n      });\r\n      // Якщо сталася помилка під час запиту, показуємо повідомлення з текстом помилки.\r\n    })\r\n\r\n    .finally(() => {\r\n      hideLoader();\r\n      // У будь-якому випадку, після завершення запиту (успішного чи з помилкою) ховаємо індикатор завантаження.\r\n\r\n      form.reset();\r\n      // Скидаємо форму (очищуємо поля введення).\r\n    });\r\n});\r\n"],"names":["createGallery","images","gallery","galleryMarkup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","clearGallery","showLoader","loader","hideLoader","getImagesByQuery","query","perPage","params","axios","response","hits","iziToast","error","form","event"],"mappings":"owBASO,SAASA,EAAcC,EAAQ,CAGpC,MAAMC,EAAU,SAAS,cAAc,UAAU,EAG3CC,EAAgBF,EAGnB,IACC,CAAC,CACC,aAAAG,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IAGe;AAAA;AAAA,4CAE6BL,CAAa;AAAA;AAAA;AAAA,uBAGlCD,CAAY;AAAA,uBACZE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,+BAKIC,CAAK;AAAA;AAAA;AAAA,+BAGLC,CAAK;AAAA;AAAA;AAAA,kCAGFC,CAAQ;AAAA;AAAA;AAAA,mCAGPC,CAAS;AAAA;AAAA,gBAQvC,EACA,KAAK,EAAE,EAGVR,EAAQ,mBAAmB,YAAaC,CAAa,EAGrD,IAAIQ,EAAe,aAAc,CAC/B,aAAc,MACd,aAAc,GAClB,CAAG,EAAE,QAAO,CAKZ,CAEO,SAASC,GAAe,CAG7B,MAAMV,EAAU,SAAS,cAAc,UAAU,EAG7CA,IACFA,EAAQ,UAAY,GAGxB,CAEO,SAASW,GAAa,CAG3B,MAAMC,EAAS,SAAS,cAAc,SAAS,EAG3CA,GACFA,EAAO,UAAU,OAAO,QAAQ,CAGpC,CAEO,SAASC,GAAa,CAG3B,MAAMD,EAAS,SAAS,cAAc,SAAS,EAG3CA,GACFA,EAAO,UAAU,IAAI,QAAQ,CAGjC,CCjGe,SAASE,EAAiBC,EAAOC,EAAU,EAAG,CAG3D,MAAMC,EAAS,IAAI,gBAAgB,CAGjC,IAAK,qCAGL,EAAGF,EAGH,WAAY,QAGZ,SAAUC,EAGV,YAAa,aAGb,WAAY,EAEhB,CAAG,EAKD,OAAOE,EAAM,4BAAUD,CAAM,EAAE,EAG5B,KAAKE,GAAY,CAGhB,KAAM,CAAE,KAAAC,CAAI,EAAKD,EAAS,KAG1B,OAAIC,EAAK,SAAW,GAGlBC,EAAS,MAAM,CAGb,MAAO,QACP,QACE,2EACF,SAAU,UACpB,CAAS,EAEM,IAIFD,CAEb,CAAK,EAEA,MAAME,IAGLD,EAAS,MAAM,CAGb,MAAO,QACP,QAAS,sBAAsBC,EAAM,OAAO,GAC5C,SAAU,UAClB,CAAO,EAEM,GAER,CACL,CC/DA,MAAMC,EAAO,SAAS,cAAc,OAAO,EAG3CA,EAAK,iBAAiB,SAAUC,GAAS,CAGvCA,EAAM,eAAc,EAGpBd,IAGAC,IAGA,MAAMI,EAAQ,SAAS,cAAc,sBAAsB,EAAE,MAAM,OAI7DC,EAAU,SAAS,cAAc,mBAAmB,EAAE,MAG5DF,EAAiBC,EAAOC,CAAO,EAG5B,KAAKI,GAAQ,CACZtB,EAAcsB,CAAI,CAExB,CAAK,EAEA,MAAME,GAAS,CACdD,EAAS,MAAM,CACb,MAAO,QACP,QAAS,sBAAsBC,EAAM,OAAO,GAC5C,SAAU,UAClB,CAAO,CAEP,CAAK,EAEA,QAAQ,IAAM,CACbT,IAGAU,EAAK,MAAK,CAEhB,CAAK,CACL,CAAC"}